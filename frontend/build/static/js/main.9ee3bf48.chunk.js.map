{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","sessionId","setSessionId","useState","sendMessageToContent","action","timestamp","chrome","tabs","query","active","currentWindow","sendMessage","id","type","React","createElement","className","onClick","handleConnect","runtime","response","success","console","log","handlePlay","handlePause","handleSync","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"sMAoDeA,MAhDOA,KACpB,MAAOC,EAAWC,GAAgBC,mBAAiB,IAE7CC,EAAuBA,CAACC,EAAgBC,KAC5CC,OAAOC,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,GAASH,IACxDD,OAAOC,KAAKI,YAAYJ,EAAK,GAAGK,IAAM,EAAG,CAAEC,KAAM,gBAAiBT,SAAQC,iBAkB9E,OACES,IAAAC,cAAA,OAAKC,UAAU,uBACbF,IAAAC,cAAA,UAAQC,UAAU,oBAChBF,IAAAC,cAAA,UAAI,cAEND,IAAAC,cAAA,QAAMC,UAAU,kBACdF,IAAAC,cAAA,UAAQC,UAAU,MAAMC,QApBRC,KACpBZ,OAAOa,QAAQR,YAAY,CAAEE,KAAM,kBAAqBO,IAClDA,EAASC,SAASC,QAAQC,IAAI,uCAkBgB,qBAGhDT,IAAAC,cAAA,OAAKC,UAAU,qBACbF,IAAAC,cAAA,UAAQC,UAAU,eAAeC,QAlBtBO,IAAMrB,EAAqB,SAkBgB,qBAGtDW,IAAAC,cAAA,UAAQC,UAAU,gBAAgBC,QApBtBQ,IAAMtB,EAAqB,UAoBiB,gBAGxDW,IAAAC,cAAA,UAAQC,UAAU,eAAeC,QAtBtBS,KAGjBvB,EAAqB,OADH,MAoB0C,yBC/BjDwB,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WACpBC,SAASC,eAAe,SAErBC,OACH3B,IAAAC,cAACD,IAAM4B,WAAU,KACf5B,IAAAC,cAAChB,EAAG,QAOR4B,K","file":"static/js/main.9ee3bf48.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { VideoControlAction, ControlMessage } from \"./types\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  const [sessionId, setSessionId] = useState<string>(\"\");\n\n  const sendMessageToContent = (action: string, timestamp?: number) => {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      chrome.tabs.sendMessage(tabs[0].id || 0, { type: \"CONTROL_VIDEO\", action, timestamp });\n    });\n  };\n\n  const handleConnect = () => {\n    chrome.runtime.sendMessage({ type: \"CONNECT_SOCKET\" }, (response) => {\n      if (response.success) console.log(\"WebSocket connection initiated!\");\n    });\n  };\n\n  const handlePlay = () => sendMessageToContent(\"PLAY\");\n  const handlePause = () => sendMessageToContent(\"PAUSE\");\n  const handleSync = () => {\n    // Example timestamp; replace with actual logic to sync timestamps\n    const timestamp = 30; // Assume 30 seconds as an example\n    sendMessageToContent(\"SYNC\", timestamp);\n  };\n\n  return (\n    <div className=\"syncwatch-container\">\n      <header className=\"syncwatch-header\">\n        <h1>SyncWatch</h1>\n      </header>\n      <main className=\"syncwatch-main\">\n        <button className=\"btn\" onClick={handleConnect}>\n          Connect to Server\n        </button>\n        <div className=\"playback-controls\">\n          <button className=\"btn btn-play\" onClick={handlePlay}>\n            ‚ñ∂Ô∏è Play\n          </button>\n          <button className=\"btn btn-pause\" onClick={handlePause}>\n            ‚è∏ Pause\n          </button>\n          <button className=\"btn btn-sync\" onClick={handleSync}>\n            üîÑ Sync\n          </button>\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry?: any) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}